{% extends "base.html" %}

{% block title %}股票首頁{% endblock %}
{% block header_title %}股票首頁{% endblock %}

{% block content %}
<div class="container" style="max-width:1200px; margin:30px auto; padding:20px;">
    <h1 style="text-align:center; margin-bottom:40px;">股票列表</h1>

    <div class="stock-grid" style="
        display: grid; 
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); 
        gap: 20px;">
        {% for code, name in stocks.items() %}
            <div class="stock-card" style="
                background-color: white; 
                color: black; 
                border: 1px solid #ddd; 
                border-radius: 8px; 
                overflow: hidden; 
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); 
                display: flex; 
                flex-direction: column;">
                <a href="{{ url_for('stock.stock_detail', stock_code=code) }}" style="
                    text-decoration: none; 
                    color: #333; 
                    font-weight: bold; 
                    padding: 16px; 
                    font-size: 18px; 
                    border-bottom: 1px solid #eee;">
                    {{ name }}（{{ code }}）
                </a>
                <div id="kline-{{ code }}" style="width:100%; height:250px;"></div>
            </div>
        {% endfor %}
    </div>
</div>

<!-- Plotly -->
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script>
    {% for code, name in stocks.items() %}
    async function drawKline{{ code }}() {
        try {
            const res = await fetch(`/stock/kline/{{ code }}`);
            if (!res.ok) {
                console.error('Fetch failed for {{ code }}:', res.status);
                return;
            }
            const data = await res.json();
            console.log('K線資料', '{{ code }}', data);

            if (!data || data.length === 0) return;

            const trace = {
                x: data.map(d => d.date),
                open: data.map(d => d.open),
                high: data.map(d => d.high),
                low: data.map(d => d.low),
                close: data.map(d => d.close),
                type: 'candlestick',
                increasing: {line: {color: 'green'}},
                decreasing: {line: {color: 'red'}}
            };

            const layout = {
                margin: { t: 20, b: 30 },
                xaxis: { rangeslider: { visible: false } },
                yaxis: { autorange: true }
            };

            Plotly.newPlot('kline-{{ code }}', [trace], layout, {displayModeBar: false});
        } catch (err) {
            console.error('Error drawing Kline for {{ code }}:', err);
        }
    }

    drawKline{{ code }}();
    {% endfor %}
</script>
{% endblock %}